linux ls명령어: 파일리스트 보기(-al -> 숨김파일 및 폴더까지 show)
linux cd명령어: 폴더 이동

git flow
github flow

Git-Github 기본용어
  branch: 깃의 작업영역(-a -> 깃 원격저장소(github) remote의 branch까지 보여줌
  main: 깃의 기본 브랜치(예전에는 develop, master) -> local, remote
  HEAD: 현재 작업 브랜치의 위치
  remote/origin: 깃의 기본 원격 브랜치의 alias
  clone: git remote의 처음 파일들을 local pc에 복제하는 명령어
  pull: git의 remote위치에 있는 가장 최신의 commit 및 push한
        내용들을 가져오는 명령어

Git의 설정 명령 -> git config
  git config [설정키] [설정값]
    global
  -> ex) git config --global user.name teacher
           git config --global user.email teacher@naver.com

     local
  -> ex) git config user.name testconfig1
           git config user.email testconfig1@abc.com

  git config --list -> git의 환경변수(설정키) 설정값 보여주는 명령어

  git log -> git 커밋한 내용들을 모두 볼 수 있는 명령어
  git log -숫자 -> 숫자 개수만큼 로그 보기
  git log --pretty=oneline

  git status -> 깃 버전 관리 상태 확인 

  git add 파일명1 -> 새로 생성된 파일명1을 commit할 수 있도록 Staged Area에 등록
  git add 파일명1 파일명2 -> 새로 생성된 파일명1, 파일명2 파일을 commit할 수 있도록 Staged Area에 등록하는 명령어
  git add . -> 현재 디렉토리(폴더)의 모든 새로 생성된 파일을 commit할 수 있도록 Staged Area에 등록하는 명령어

  git commit -m '메시지 내용' -> git 로컬에 반영(스냅샵, 해시 생성)
  git commit --amend -m '메시지 내용2' -> 현재 HEAD에 있는 commit 메시지 변경
  git commit -a -m '메시지 내용3' -> git add + git commit -m 기능

  git push -> 로컬 작업한 commit의 내용을 원격저장소(github)에 저장

  git restore --staged 파일명1 -> Staged Aread에 있는 파일명을 Untracked 상태로 변경
   
  git reset: 커밋을 지우는 명령어(버전 관리 되돌리기 명령어)
     git reset HEAD^: 마지막 커밋을 스테이징 하기 전 상태로 되돌리는 명령어
       -> 최근 1개의 커밋 삭제 + 변경된 파일 unstaging상태로 유지
     git reset --hard HEAD^: 최근 1개의 커밋 삭제 + 변경된 파일 함께 되돌림
   
     git reset HEAD^^: 마지막 2개의 커밋을 스테이징 하기 전 상태로 되돌리는 명령어(== git reset HEAD~2)
       -> 최근 2개의 커밋 삭제 + 변경된 파일은 unstaging 상태로 유지
     git reset --hard HEAD^^: 최근 n개의 커밋 삭제 + 변경된 파일도 함께 되돌림

  git revert: 커밋을 하고 push를 한 상태에서 또 다른 커밋을 만들어 push을 할 때 사용

  git branch: 현재 로컬에 있는 모든 브랜치를 보여주는 명령어
  git branch 브랜치명: 로컬 브랜치를 만드는 명령어
  git branch -r: 원격 브랜치 리스트 조회
  git branch -a: 로컬 및 원격 브랜치 리스트를 전부 조회
  원격 브랜치만 삭제 -> git push origin -d 브랜치명 

  git checkout 만들어진브랜치명: 만들어진브랜치명으로 작업영역 변경
  git checkout -b 만들브랜치명: 만들브랜치명이 만들어지고 바로 만들브랜치명으로 작업영역 변경
  git checkout -b 만들브랜치명 remote브랜치명: 로컬 브랜치에 만들브랜치명으로 remote브랜치를 가져오는 명령어
  git checkout -t remote브랜치명:  remote에 있는 remote브랜치명을 로컬 브랜치로 만들수 있는 명령어
  
  git merge 머지할브랜치명: 해당 브랜치에서 머지할브랜치명을 merge
  
  git conflict(충돌)해결 방법
    - 충돌 발생
      -- 2개의 브랜치 만들기
        --- git branch con-test1
        --- git branch con-test2
      -- 2개의 브랜치에서 같은 파일의 같은 라인을 수정하고 commit
        --- git checkout con-test1 & 파일수정 & git commit -a -m '변경1'
        --- git checkout con-test2 & 파일수정 & git commit -a -m '변경2'
      -- 첫번째 브랜치(con-test1)를 develop 혹은 main브랜치에 머지
        --- git checkout develop
        --- git merge con-test1
      -- 두번째 브랜치(con-test2)를 develop 혹은 amin브랜치에 머지 시도
        --- git merge con-test2
      -- 충돌이 남. 충돌 해결하기
        --- 충돌된 라인을 원하는 내용으로 수정 -> 텍스트 파일
        --- 수정된 파일을 commit

develop에서
1. a브랜치를 만든다
2. a브랜치 a프로그램을 만드는데 폴더를 만들어서 거기에 소스들 add commit push한다.
3. develop브랜치 이동한다.
4. b브랜치를 만든다
5. b브랜치 b프로그램을 만드는데 폴더를 만들어서 거기에 소스들 add commit push한다.
..
.

git 원격 저장소 관련 명령
  git remote -v: 원격 저장소 정보 보기
  git remote add origin 원격저장지주소repostory: 원격 저장소(github 등)을 등록
  git push
  git pull: 원격저장소에 있는 내용들을 전부 로컬git에 저장(+ local에 있는 내용들이랑 merge)
  git fetch: 원격저장소에 있는 내용들을 전부 로컬git에 저장(merge는 하지 않음. 결국 따로 merge 명령어를 실행해야 함)

github 활용하기
  PR(pull request)실행
  PR실행에서 merge



